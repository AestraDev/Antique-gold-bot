"use strict";
/**
 * YouTube Search
 * @author Snowflake107
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTube = exports.Video = exports.Playlist = exports.Channel = exports.Thumbnail = exports.Util = void 0;
const Util_1 = __importDefault(require("./Util"));
exports.Util = Util_1.default;
const Channel_1 = __importDefault(require("./Structures/Channel"));
exports.Channel = Channel_1.default;
const Playlist_1 = __importDefault(require("./Structures/Playlist"));
exports.Playlist = Playlist_1.default;
const Video_1 = __importDefault(require("./Structures/Video"));
exports.Video = Video_1.default;
const Thumbnail_1 = __importDefault(require("./Structures/Thumbnail"));
exports.Thumbnail = Thumbnail_1.default;
// @ts-ignore
const simple_youtube_api_1 = __importDefault(require("simple-youtube-api"));
const SAFE_SEARCH_COOKIE = "PREF=f2=8000000";
const conditions = new Map();
let yt;
class YouTube {
    constructor() {
        throw new Error(`The ${this.constructor.name} class may not be instantiated!`);
    }
    static search(query, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __awaiter(this, void 0, void 0, function* () {
            if (!options)
                options = { limit: 20, type: "video", requestOptions: {} };
            if (!query || typeof query !== "string")
                throw new Error(`Invalid search query "${query}"!`);
            options.type = options.type || "video";
            if (!YouTube.get("api")) {
                const filter = options.type === "all" ? "" : `&sp=${Util_1.default.filter(options.type)}`;
                const url = `https://youtube.com/results?q=${encodeURI(query.trim())}&hl=en${filter}`;
                const requestOptions = options.safeSearch ? Object.assign(Object.assign({}, options.requestOptions), { headers: { cookie: SAFE_SEARCH_COOKIE } }) : {};
                const html = yield Util_1.default.getHTML(url, requestOptions);
                return Util_1.default.parseSearchResult(html, options);
            }
            else {
                if (!yt)
                    yt = new simple_youtube_api_1.default(YouTube.get("api"));
                const result = yield yt.search(query.trim(), options.limit, { type: options.type });
                if (!result || !result.length)
                    return [];
                let data = [];
                for (const item of result) {
                    switch (item.type) {
                        case "video":
                            yield item.fetch().catch(() => { });
                            yield item.channel.fetch().catch(() => { });
                            data.push(new Video_1.default({
                                id: item.id,
                                title: item.title,
                                url: item.url,
                                description: item.description,
                                duration: item.durationSeconds,
                                duration_raw: typeof item.duration === "object" ? Object.values(item.duration).join(":").replace(/0:/g, "") : null,
                                thumbnail: {
                                    id: item.id,
                                    url: item.maxRes.url,
                                    width: item.maxRes.width,
                                    height: item.maxRes.height
                                },
                                channel: {
                                    id: item.channel.id,
                                    name: item.channel.title,
                                    url: item.channel.url,
                                    icon: {
                                        url: (_a = item.channel.thumbnails) === null || _a === void 0 ? void 0 : _a.default.url,
                                        width: (_b = item.channel.thumbnails) === null || _b === void 0 ? void 0 : _b.default.width,
                                        height: (_c = item.channel.thumbnails) === null || _c === void 0 ? void 0 : _c.default.height
                                    },
                                    verified: false
                                },
                                uploadedAt: item.publishedAt.toString(),
                                views: (_d = (typeof item.views === "number" ? item.views : 0)) !== null && _d !== void 0 ? _d : 0
                            }));
                            break;
                        case "playlist":
                            yield item.fetch().catch(() => { });
                            yield item.channel.fetch().catch(() => { });
                            let vy = yield item.getVideos();
                            yield vy.channel.fetch().catch(() => { });
                            vy = vy.map((m) => {
                                var _a, _b, _c, _d;
                                return new Video_1.default({
                                    id: m.id,
                                    title: m.title,
                                    url: m.url,
                                    description: m.description,
                                    duration: m.durationSeconds,
                                    duration_raw: typeof item.duration === "object" ? Object.values(item.duration).join(":").replace(/0:/g, "") : null,
                                    thumbnail: {
                                        id: m.id,
                                        url: m.maxRes.url,
                                        width: m.maxRes.width,
                                        height: m.maxRes.height
                                    },
                                    channel: {
                                        id: m.channel.id,
                                        name: m.channel.title,
                                        url: m.channel.url,
                                        icon: {
                                            url: (_a = m.channel.thumbnails) === null || _a === void 0 ? void 0 : _a.default.url,
                                            width: (_b = m.channel.thumbnails) === null || _b === void 0 ? void 0 : _b.default.width,
                                            height: (_c = m.channel.thumbnails) === null || _c === void 0 ? void 0 : _c.default.height
                                        },
                                        verified: false
                                    },
                                    uploadedAt: m.publishedAt.toString(),
                                    views: (_d = (typeof m.views === "number" ? item.views : 0)) !== null && _d !== void 0 ? _d : 0
                                });
                            });
                            let pl = new Playlist_1.default({
                                id: item.id,
                                videoCount: item.length,
                                lastUpdate: item.publishedAt.toString(),
                                views: 0,
                                videos: vy,
                                url: item.url,
                                link: item.url,
                                author: {
                                    id: item.channel.id,
                                    name: item.channel.title,
                                    url: item.channel.url,
                                    icon: {
                                        url: (_e = item.channel.thumbnails) === null || _e === void 0 ? void 0 : _e.default.url,
                                        width: (_f = item.channel.thumbnails) === null || _f === void 0 ? void 0 : _f.default.width,
                                        height: (_g = item.channel.thumbnails) === null || _g === void 0 ? void 0 : _g.default.height
                                    },
                                    verified: false
                                },
                                thumbnail: item.thumbnails.maxres.url
                            });
                            data.push(pl);
                            break;
                        case "channel":
                            yield item.fetch().catch(() => { });
                            data.push(new Channel_1.default({
                                id: item.id,
                                name: item.title,
                                url: item.url,
                                icon: {
                                    url: (_h = item.thumbnails) === null || _h === void 0 ? void 0 : _h.default.url,
                                    width: (_j = item.thumbnails) === null || _j === void 0 ? void 0 : _j.default.width,
                                    height: (_k = item.thumbnails) === null || _k === void 0 ? void 0 : _k.default.height
                                },
                                verified: false
                            }));
                            break;
                    }
                }
                return data;
            }
        });
    }
    static searchOne(query, type, safeSearch, requestOptions) {
        if (!type)
            type = "video";
        return new Promise((resolve) => {
            // @ts-ignore
            YouTube.search(query, { limit: 1, type: type, requestOptions: requestOptions, safeSearch: !!safeSearch })
                .then(res => {
                if (!res || !res.length)
                    return resolve(null);
                resolve(res[0]);
            })
                .catch(() => {
                resolve(null);
            });
        });
    }
    /**
     * Returns playlist details
     * @param {string} url Playlist URL
     * @param {object} [options] Options
     * @param {number} [options.limit=100] Playlist video limit
     * @param {RequestInit} [options.requestOptions] Request Options
     */
    static getPlaylist(url, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (!options)
                options = { limit: 100, requestOptions: {} };
            if (!url || typeof url !== "string")
                throw new Error(`Expected playlist url, received ${typeof url}!`);
            Util_1.default.validatePlaylist(url);
            url = Util_1.default.getPlaylistURL(url);
            if (!YouTube.get("api")) {
                const html = yield Util_1.default.getHTML(`${url}&hl=en`, options && options.requestOptions);
                return Util_1.default.getPlaylist(html, options && options.limit);
            }
            else {
                if (!yt)
                    yt = new simple_youtube_api_1.default(YouTube.get("api"));
                const item = yield yt.getPlaylist(url);
                yield item.fetch().catch(() => { });
                yield item.channel.fetch().catch(() => { });
                let vy = yield item.getVideos(options.limit);
                yield vy.channel.fetch().catch(() => { });
                vy = vy.map((m) => {
                    var _a, _b, _c, _d;
                    return new Video_1.default({
                        id: m.id,
                        title: m.title,
                        url: m.url,
                        description: m.description,
                        duration: m.durationSeconds,
                        duration_raw: typeof item.duration === "object" ? Object.values(item.duration).join(":").replace(/0:/g, "") : null,
                        thumbnail: {
                            id: m.id,
                            url: m.maxRes.url,
                            width: m.maxRes.width,
                            height: m.maxRes.height
                        },
                        channel: {
                            id: m.channel.id,
                            name: m.channel.title,
                            url: m.channel.url,
                            icon: {
                                url: (_a = m.channel.thumbnails) === null || _a === void 0 ? void 0 : _a.default.url,
                                width: (_b = m.channel.thumbnails) === null || _b === void 0 ? void 0 : _b.default.width,
                                height: (_c = m.channel.thumbnails) === null || _c === void 0 ? void 0 : _c.default.height
                            },
                            verified: false
                        },
                        uploadedAt: m.publishedAt.toString(),
                        views: (_d = (typeof m.views === "number" ? item.views : 0)) !== null && _d !== void 0 ? _d : 0
                    });
                });
                let pl = new Playlist_1.default({
                    title: item.title,
                    id: item.id,
                    videoCount: item.length,
                    lastUpdate: item.publishedAt.toString(),
                    views: 0,
                    videos: vy,
                    url: item.url,
                    link: item.url,
                    author: {
                        id: item.channel.id,
                        name: item.channel.title,
                        url: item.channel.url,
                        icon: {
                            url: (_a = item.channel.thumbnails) === null || _a === void 0 ? void 0 : _a.default.url,
                            width: (_b = item.channel.thumbnails) === null || _b === void 0 ? void 0 : _b.default.width,
                            height: (_c = item.channel.thumbnails) === null || _c === void 0 ? void 0 : _c.default.height
                        },
                        verified: false
                    },
                    thumbnail: item.thumbnails.maxres.url
                });
                return pl;
            }
        });
    }
    /**
     * Returns basic video info
     * @param url Video url to parse
     * @param requestOptions Request options
     */
    static getVideo(url, requestOptions) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if (!url)
                throw new Error("Missing video url");
            if (url instanceof Video_1.default)
                url = url.url;
            const isValid = YouTube.validate(url, "VIDEO");
            if (!isValid)
                throw new Error("Invalid video url");
            if (!YouTube.get("api")) {
                const html = yield Util_1.default.getHTML(`${url}&hl=en`, requestOptions);
                return Util_1.default.getVideo(html);
            }
            else {
                if (!yt)
                    yt = new simple_youtube_api_1.default(YouTube.get("api"));
                const item = yield yt.getVideo(url);
                if (!item)
                    throw new Error("Could not parse video");
                yield item.fetch().catch(() => { });
                yield item.channel.fetch().catch(() => { });
                return new Video_1.default({
                    id: item.id,
                    title: item.title,
                    url: item.url,
                    description: item.description,
                    duration: item.durationSeconds,
                    duration_raw: typeof item.duration === "object" ? Object.values(item.duration).join(":").replace(/0:/g, "") : null,
                    thumbnail: {
                        id: item.id,
                        url: item.maxRes.url,
                        width: item.maxRes.width,
                        height: item.maxRes.height
                    },
                    channel: {
                        id: item.channel.id,
                        name: item.channel.title,
                        url: item.channel.url,
                        icon: {
                            url: (_a = item.channel.thumbnails) === null || _a === void 0 ? void 0 : _a.default.url,
                            width: (_b = item.channel.thumbnails) === null || _b === void 0 ? void 0 : _b.default.width,
                            height: (_c = item.channel.thumbnails) === null || _c === void 0 ? void 0 : _c.default.height
                        },
                        verified: false
                    },
                    uploadedAt: item.publishedAt.toString(),
                    views: (_d = (typeof item.views === "number" ? item.views : 0)) !== null && _d !== void 0 ? _d : 0
                });
            }
        });
    }
    /**
     * Validates playlist
     * @param {string} url Playlist id or url/video id or url to validate
     * @param {"VIDEO"|"VIDEO_ID"|"PLAYLIST"|"PLAYLIST_ID"} type URL validation type
     * @returns {boolean}
     */
    static validate(url, type) {
        if (typeof url !== "string")
            return false;
        if (!type)
            type = "PLAYLIST";
        switch (type) {
            case "PLAYLIST":
                return YouTube.Regex.PLAYLIST_URL.test(url);
            case "PLAYLIST_ID":
                return YouTube.Regex.PLAYLIST_ID.test(url);
            case "VIDEO":
                return YouTube.Regex.VIDEO_URL.test(url);
            case "VIDEO_ID":
                return YouTube.Regex.VIDEO_ID.test(url);
            default:
                return false;
        }
    }
    static isPlaylist(src) {
        if (typeof src !== "string" || !src)
            return false;
        return !!((YouTube.Regex.VIDEO_URL.test(src) && YouTube.Regex.PLAYLIST_ID.test(src)) || (YouTube.Regex.PLAYLIST_URL.test(src) && YouTube.Regex.PLAYLIST_ID.test(src)) || /^(PL|UU|LL|RD|OL)[a-zA-Z0-9-_]{16,41}$/.test(src));
    }
    static get Regex() {
        return {
            PLAYLIST_URL: Util_1.default.PlaylistURLRegex,
            PLAYLIST_ID: Util_1.default.PlaylistIDRegex,
            VIDEO_ID: Util_1.default.VideoIDRegex,
            VIDEO_URL: Util_1.default.VideoRegex
        };
    }
    static set(rx, ry) {
        conditions.set(rx, ry);
        if (rx === "api" && !ry)
            yt = undefined;
        if (ry)
            yt = new simple_youtube_api_1.default(ry);
    }
    static get(rx) {
        return conditions.get(rx);
    }
    static has(rx) {
        return conditions.has(rx);
    }
    static delete(rx) {
        yt = undefined;
        return conditions.delete(rx);
    }
}
exports.YouTube = YouTube;
exports.default = YouTube;
