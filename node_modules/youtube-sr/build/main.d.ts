/**
 * YouTube Search
 * @author Snowflake107
 */
import Util from "./Util";
import Channel from "./Structures/Channel";
import Playlist from "./Structures/Playlist";
import Video from "./Structures/Video";
import Thumbnail from "./Structures/Thumbnail";
export interface SearchOptions {
    limit?: number;
    type?: "video" | "channel" | "playlist" | "all";
    requestOptions?: RequestInit;
    safeSearch?: boolean;
}
export interface PlaylistOptions {
    limit?: number;
    requestOptions?: RequestInit;
}
declare class YouTube {
    constructor();
    /**
     * Search
     * @param {string} query Search youtube
     * @param {object} options Search options
     * @param {number} [options.limit=20] Limit
     * @param {"video"|"channel"|"playlist"|"all"} options.type Type
     * @param {RequestInit} [options.requestOptions] Request options
     * @param {boolean} [options.safeSearch] Safe search filter
     */
    static search(query: string, options?: SearchOptions & {
        type: "video";
    }): Promise<Video[]>;
    static search(query: string, options?: SearchOptions & {
        type: "channel";
    }): Promise<Channel[]>;
    static search(query: string, options?: SearchOptions & {
        type: "playlist";
    }): Promise<Playlist[]>;
    static search(query: string, options?: SearchOptions & {
        type: "all";
    }): Promise<(Video | Channel | Playlist)[]>;
    /**
     * Search one
     * @param {string} query Search query
     * @param {"video"|"channel"|"playlist"|"all"} type Search type
     * @param {boolean} safeSearch Safe search filter
     * @param {RequestInit} requestOptions Request options
     */
    static searchOne(query: string, type?: "video", safeSearch?: boolean, requestOptions?: RequestInit): Promise<Video>;
    static searchOne(query: string, type?: "channel", safeSearch?: boolean, requestOptions?: RequestInit): Promise<Channel>;
    static searchOne(query: string, type?: "playlist", safeSearch?: boolean, requestOptions?: RequestInit): Promise<Playlist>;
    /**
     * Returns playlist details
     * @param {string} url Playlist URL
     * @param {object} [options] Options
     * @param {number} [options.limit=100] Playlist video limit
     * @param {RequestInit} [options.requestOptions] Request Options
     */
    static getPlaylist(url: string, options?: PlaylistOptions): Promise<Playlist>;
    /**
     * Returns basic video info
     * @param url Video url to parse
     * @param requestOptions Request options
     */
    static getVideo(url: string | Video, requestOptions?: RequestInit): Promise<Video>;
    /**
     * Validates playlist
     * @param {string} url Playlist id or url/video id or url to validate
     * @param {"VIDEO"|"VIDEO_ID"|"PLAYLIST"|"PLAYLIST_ID"} type URL validation type
     * @returns {boolean}
     */
    static validate(url: string, type?: "VIDEO" | "VIDEO_ID" | "PLAYLIST" | "PLAYLIST_ID"): boolean;
    static isPlaylist(src: string): boolean;
    static get Regex(): {
        PLAYLIST_URL: RegExp;
        PLAYLIST_ID: RegExp;
        VIDEO_ID: RegExp;
        VIDEO_URL: RegExp;
    };
    static set(rx: string, ry: any): void;
    static get(rx: string): any;
    static has(rx: string): boolean;
    static delete(rx: string): boolean;
}
export { Util, Thumbnail, Channel, Playlist, Video, YouTube };
export default YouTube;
